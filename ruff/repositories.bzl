"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_skylib//lib:paths.bzl", "paths")
load("@bazel_tools//tools/build_defs/repo:http.bzl", _http_archive = "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//ruff/private:platforms.bzl", "RUFF_PLATFORMS")
load("//ruff/private:toolchains_repo.bzl", "toolchains_repo")
load("//ruff/private:versions.bzl", "BINARY_FILE_BASE_URL", "BINARY_FILE_TEMPLATE", "RUFF_VERSIONS")

def http_archive(name, **kwargs):
    maybe(_http_archive, name = name, **kwargs)

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
# This is all fixed by bzlmod, so we just tolerate it for now.
def rules_ruff_dependencies():
    # The minimal version of bazel_skylib we require
    http_archive(
        name = "bazel_skylib",
        sha256 = "bc283cdfcd526a52c3201279cda4bc298652efa898b10b4db0837dc51652756f",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz",
        ],
    )

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for ruff toolchain"
_ATTRS = {
    "ruff_version": attr.string(mandatory = True, values = RUFF_VERSIONS.keys()),
    "platform": attr.string(mandatory = True, values = RUFF_PLATFORMS.keys()),
}

def _ruff_repo_impl(repository_ctx):
    meta = RUFF_PLATFORMS[repository_ctx.attr.platform]

    is_windows = meta.os == "windows-msvc"

    file = BINARY_FILE_TEMPLATE.format(
        version = repository_ctx.attr.ruff_version,
        os = meta.os,
        arch = meta.arch,
        vender = meta.vender,
        ext = meta.ext,
    )
    url = BINARY_FILE_BASE_URL + file
    if meta.ext == "zip":
        strip_prefix = ""
    else:
        strip_prefix = paths.basename(file).replace("." + meta.ext, "")

    repository_ctx.download_and_extract(
        url = url,
        integrity = RUFF_VERSIONS[repository_ctx.attr.ruff_version][repository_ctx.attr.platform],
        strip_prefix = strip_prefix,
    )
    build_content = """# Generated by ruff/repositories.bzl
load("@io_halaco_rules_ruff//ruff:toolchain.bzl", "ruff_toolchain")

ruff_toolchain(
    name = "ruff_toolchain",
    target_tool = {target_tool},
    is_windows = {is_windows},
)
""".format(
        target_tool = """select({
        "@bazel_tools//src/conditions:host_windows": "ruff.exe",
        "//conditions:default": "ruff",
    })""",
        is_windows = is_windows,
    )

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

ruff_repositories = repository_rule(
    _ruff_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def ruff_register_toolchains(name, ruff_version, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "ruff_linux_amd64"
    - TODO: create a convenience repository for the host platform like "ruff_host"
    - create a repository exposing toolchains for each platform like "ruff_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "ruff0_11"
        ruff_version: version of ruff to use, like "0.11.9"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each ruff_repositories call
    """
    integrities = RUFF_VERSIONS[ruff_version]
    valid_platforms = integrities.keys()

    for platform in valid_platforms:
        ruff_repositories(
            name = name + "_" + platform,
            platform = platform,
            ruff_version = ruff_version,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        valid_platforms = valid_platforms,
        user_repository_name = name,
    )
